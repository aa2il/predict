#! /bin/tcsh
################################################################################
#
# Script to start Sat Comm stuff
#
# Some notes on the IC9700:
# 1) A quick press of the MULTI knob will bring up TX POWER ADJUSTMENT
# 2) Press Quick menu to bring up START/SOP RECORDING
# 3) See pg 3-4 of manual on how to adjust tuning step for main dial
# 4) IC9700 needs to be plugged into USB 2.0 port (white)
# 5) If USB device becomes tempremental, use lsusb to find device ID and then
#
#                  lsusb
#                  sudo usbreset 10c4:ea60
#
#    Better yet, use   sudo lsof | fgrep USB0    to figure out which device
#    is grabbing the CP210 USB device and take action as described in
#    reset_usb
#
################################################################################

# User Params

# Rig Stuff
#set RIG="FLDIGI"
#set RIG="HAMLIB"               # Doesn't work with IC9700
set RIG="FLRIG"                # This seems pretty good
#set RIG="DIRECT"
#set RIG="NONE"

#set RIG_TYPE="FTdx3000"      # Useful for testing purposes but not satcom
#set RIG_TYPE="FT991a"        # Support by Hamlib 4 seems to be improving !!
set RIG_TYPE="IC9700"       
#~/Python/findRig/findRig.py
#set RIG_TYPE=`~/Python/findRig/findRig.py`

# If this doesn't work with IC9700, plug USB cable directly into computer
if( $RIG == "FLRIG" )then
    pkill flrig
    sleep 1
endif

echo RIG_TYPE="$RIG_TYPE"
echo RIG_TYPE="$RIG_TYPE $#RIG_TYPE"
if( $#RIG_TYPE == 0 ) then
    set RIG_TYPE1="NONE"
else
    set RIG_TYPE1=$RIG_TYPE[1]
endif
echo 
echo RIG_TYPE1=$RIG_TYPE1
echo 
#exit

# Try reseting IC9700 serial device - don't need this anymore!
if( $RIG_TYPE == "IC9700" && 0 )then
    echo "Resetting IC9700 usb device ..."
    reset_usb
    sleep 1
endif

set BAUD1 = 38400
set PORT1 = 4532                # Needs to be 4532 for mode to be set correctly by gpredict

#set RIG_TYPE2="IC706"
set RIG_TYPE2="NONE"
set BAUD2 = 38400
set PORT2 = 4632                # This is probably why mode wasn't set correctly by gpredict

# Rotor stuff
set START_ROTOR = 0              # 1
set CMD3 = "rotctl"
set CMD3 = "rotctld"
set MODEL3 = 603                 # Model 603 is Yaesu GS-232B
set BAUD3  = 9600                # Can go up to 38400 with arduino, must match what is programmed in

# Other stuff
set START_GPREDICT = 0         # 0
set START_SDR      = 0         # 1
set START_KEYER    = 1         # 1
set START_CLOCK    = 0         # 0
set START_SATS     = 1         # 1
set START_QSSTV    = 0         # 0
set START_PYRIG    = 0         # 0
set USE_GPS_RC     = 0         # 0

set CAPTURE="-capture"
set CAPTURE="-capture -sidetone"
set CAPTURE=""

set CONTEST=""
#set CONTEST="-vhf"
#set CONTEST="-fd"
set WPM=20

set TEST_MODE=0
set USE_SDR=""

################################################################################

# Kill old copies of hamlib daemon, etc.
echo "SATCOM: Cleaning house ..."
set SATCMD="satellites.py"
set SATCMD="pySat.py"
pkill gpredict
pkill rigctl
pkill rigctld
pkill rotctl
pkill rotctld
pkill $CMD3
pkill bandmap
pkill pySDR.py
pkill pyRig.py
pkill $SATCMD
pkill qsstv
pkill pyKeyer
pkill flrig
rm -f /tmp/HAMLIB /tmp/FLDIGI /tmp/KEYER /tmp/WCLOCK /tmp/BANDMAP
sleep 1

################################################################################

# Start FLRIG
if( $RIG == "FLRIG" )then
    start_flrig $RIG_TYPE1
    set PORT1=12345                  # Port no. for FLRIG server
endif 
if( $RIG == "FLRIG" && $RIG_TYPE1 == "IC9700")then
    set PORT1=12346
endif 
#exit
    
################################################################################

# Select hamlib version
set EXE_DIR="~/hamlib-4.2/tests"                      # Stable version  - doesn't work with IC9700
set EXE_DIR="~/hamlib-4.3/tests"                      # Stable version - doesn't work with IC9700
set EXE_DIR="~/hamlib-4.3.1/tests"                    # Most recent release - doesn't work with IC9700

# Start hamlib rigctld daemon
if( $RIG == "HAMLIB" )then
    start_hamlib $RIG_TYPE1 $TEST_MODE
    set PORT = 4532
    
    #exit
endif

# Need to revisit this - when I was using SDR for RX
if( $RIG_TYPE2 != "NONE" )then
    echo " "
    set a=`ls -l $DEVICE2`
    echo -$a-
    set b=`echo $a | cut -f 2 -d '>'`
    echo -$b-
    set c=`echo $b | cut -f 3 -d '/'`
    echo -$c-
    echo " "

    set CMD2 = "$EXE_DIR/rigctld -vvv -m $MODEL2 -s $BAUD2 -r /dev/$c  -t $PORT2"
    $CMD2 &
    echo "Rigctl daemon 2 started."
    ps -A u | fgrep -i rigctl
endif

################################################################################

# Rotor control - Locate arduino device
echo "SATCOM: Starting HAMLIB for rotor control..."
set ROTOR_CONNECTION = ""
echo START_ROTOR=$START_ROTOR
set a=`ls -al /dev/serial/by-id/*arduino*`
echo a=-$a-
set b=`echo $a | cut -f 2 -d '>'`
echo b=-$b-
set c=`echo $b | cut -f 3 -d '/'`
echo c=-$c-

if( $START_ROTOR && ($#c > 0) )then
    set DEVICE3="/dev/$c"
    echo DEVICE3=$DEVICE3
    #echo DEVICE3=$#DEVICE3
    
    set OPTS3 = "-m $MODEL3 -r $DEVICE3 -s $BAUD3"
    set OPTS3 = "-vvv -m $MODEL3 -r $DEVICE3 -s $BAUD3"

    # Execute the command
    echo $EXE_DIR/$CMD3 $OPTS3
    $EXE_DIR/$CMD3 $OPTS3 &
    sleep 1
    set ROTOR_CONNECTION = "-rotor HAMLIB -port2 4533"
    
else if( $START_ROTOR > 0 && ($#c == 0) )then
    echo "Rotor interface not found"
    exit
    
    # Dummy
    set OPTS3 = "-m 1 "
    echo $EXE_DIR/$CMD3 $OPTS3
    $EXE_DIR/$CMD3 $OPTS3 &
    sleep 1
    set ROTOR_CONNECTION = "-rotor HAMLIB -port2 4533"
endif
echo " "
#exit

################################################################################

# Start gpredict
if( $START_GPREDICT )then
    #~/gpredict-2.3/src/gpredict &
    gpredict &
endif
#exit

################################################################################

# Start the SDR
if( $START_SDR )then
    echo " "
    echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ Starting SDR ..."
    cd ~/Python/pySDR
    start_loopback
    set USE_SDR="-sdr"

    set FOLLOW="-follow_freq"
    set FOLLOW=""

    set FS=48
    set PY_SDR = "~/Python/pySDR/pySDR.py"
    set CMD="$PY_SDR -mode CW -fsout $FS -vid_bw 45 -af_bw 10 -ant A $FOLLOW -pan -pan_dr 40 -no_rigctl -mute"
    echo $CMD >& /tmp/SDR 
    $CMD >>& /tmp/SDR &
    sleep 1

    echo "Waiting for SDR to start ..."
    set id=`find_windows "pySDR" 10`
    while( $#id<1 )
        set id=`find_windows "pySDR" 10`
        sleep 1
    end

    # Test connection by changing freq
    #rigctl -m 2 -r localhost:4575 F 760000
endif
#exit

###############################################################################

# Set gps rc file flag
if( $USE_GPS_RC )then
    set GPS="-gps"
else
    set GPS=""
endif

# Start CW keyer also ...
set UDP=""
if( $START_KEYER )then
    echo " "
    echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ Starting Keyer ..."
    pushd ~/Python/pyKeyer
    set KEYER_OPTS="-sat -udp -use_adif_hist -max_age 99999 -nrows 0 -log sats.adif -nohints $GPS"
    set CMD="pyKeyer.py -wpm ${WPM} ${CONTEST} $CAPTURE -rig $RIG -port $PORT1 $ROTOR_CONNECTION $KEYER_OPTS"
    echo $CMD >& /tmp/KEYER
    $CMD >>& /tmp/KEYER &
 
    echo "Waiting for pyKeyer to start ..."
    set id=`find_windows "pyKeyer by AA2IL" 30`
    echo id=$id
    if ( $#id == 0 ) then
        echo "--- ERROR --- Never found pyKeyer after 30 tries - giving up"
        exit
    endif
    wmctrl -l    

    set UDP="-udp"
    
    popd
endif

# ... and World Clock ...
if( $START_CLOCK )then
    pkill wclock.py
    echo " "
    echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ Starting World Clock ..."
    pushd ~/Python/wclock
    wclock.py >& /tmp/WCLOCK &
    popd
endif

# ... and Sat Predictor
if( $START_SATS )then
    echo " "
    echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ Starting Pass Predictor  ..."
    set CMD="$SATCMD -rig $RIG -port $PORT1 $ROTOR_CONNECTION $USE_SDR -tstart -1 $UDP $GPS"
    #pushd ~/Python/satellites
    pushd ~/Python/pySat
    echo $CMD >& /tmp/SATELLITES
    $CMD >>& /tmp/SATELLITES &
    #$CMD &
    popd
endif

# ... and pyRIG
if( $START_PYRIG )then
    echo " "
    echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ Starting pyRIG  ..."
    set CMD="pyRig.py -rig $RIG $ROTOR_CONNECTION"
    pushd ~/Python/pyRig
    echo $CMD >& /tmp/PYRIG
    $CMD >>& /tmp/PYRIG &
    popd
endif

# and QSSTV
if( $START_QSSTV )then
    echo " "
    echo "*** For QSSTV, the following settings are recommend: ***"
    echo "    Auto Slant"
    echo "    Auto Save"
    echo "    High or DX Sensitity"
    echo " "
    echo Starting PAVUCONTROL and QSSTV ...
    pavucontrol &
    qsstv >& /tmp/QSSTV &
endif

###############################################################################

# Advice when using IC9700
if( $RIG_TYPE1 == "IC9700" )then
    #zenity --info --text="Be sure REVERSE mode is set \n\n\t\t\tand\n\nKeep RF gain knobs centered\!" --title="Reminder\!" &
endif

#cat ~/Python/satellites/xit.txt

exit

###############################################################################


# Test connection
echo " "
echo $EXE_DIR/rigctl -m 2 -r localhost:4532 m
$EXE_DIR/rigctl -m 2 -r localhost:4532 m
echo " "
echo $EXE_DIR/rigctl -m $MODEL -r /dev/$c m
$EXE_DIR/rigctl -m $MODEL -r /dev/$c m
#$EXE_DIR/rigctl -m 2 m

# How to properly set both split freqs
#$EXE_DIR/rigctl -m 2 -r localhost:4532 F 600000 S 1 VFOB I 760000

# Hose up VFOs on purpose for testing purposes
$EXE_DIR/rigctl -m 2 -r localhost:4532 F 600000 S 1 VFOB I 760000 M AM 0 X AM 0

#exit

# We may need these macros to effect proper operation but they dont work!
# They do seem to work if we talk directly to rig (-m 135 -r /dev/...)
# so there is a bug in hamlib

# This is where the problems seemed to be BUT ...
# problem is in WSJTX version of hamlib!!!  These seem to work just fine using HAMLIB 3.3 on the FT991a
# They do not work on the FTdx3000 - the FTdx5000 code does not have a special routine for this.
# Take a look at how the ft991 hamlib backend works and see if we can adapt it.

# The response to 1=dump capabilities is Y/N/E where E=Emulated

# Had some luck with this type of thing on the IC9700

# For Voice
#rigctl -m 2 -r localhost:4532 M USB 0 X LSB 0
#rigctl -m 2 -r localhost:4532 M FM 0 X FM 0
#rigctl -m 2 -r localhost:4532 M USB 0 X USB 0
#
# For Digital Mode (ie APRS, etc)
#rigctl -m 2 -r localhost:4532 M PKTUSB 0 X PKTLSB 0
#rigctl -m 2 -r localhost:4532 M PKTFM 0 X PKTFM 0
#rigctl -m 2 -r localhost:4532 M PKTUSB 0 X PKTUSB 0


# e.g. This works
rigctl -m 135 -r /dev/serial/by-id/usb-Silicon_Labs_CP2105_Dual_USB_to_UART_Bridge_Controller_00A50791-if00-port0 M USB 0 X LSB 0

# but this doesnt
rigctl -m 2 -r localhost:4532 M USB 0 X LSB 0


